generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id         String      @id @default(uuid())
  email      String      @unique
  password   String
  name       String
  username   String      @unique
  bio        String?     @default("")
  avatar     String?
  posts      Post[]
  comments   Comment[]
  likes      Like[]
  savedPosts SavedPost[]
  userRoles  UserRole[]
  // postCount   Int          @default(0)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  deletedAt  DateTime?

  @@index([username])
  @@index([email])
  @@index([createdAt])
  @@map("users")
}

model Role {
  id        String     @id @default(uuid())
  name      String     @unique
  users     UserRole[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@index([name])
  @@map("roles")
}

model UserRole {
  id        String    @id @default(uuid())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  role      Role      @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId    String
  createdAt DateTime  @default(now())
  expiredAt DateTime?

  @@unique([userId, roleId])
  @@map("user_roles")
}

model Post {
  id          String      @id @default(uuid())
  title       String
  slug        String      @unique
  content     String
  image       String?
  // views        Int          @default(0)
  likes       Like[]
  comments    Comment[]
  savedBy     SavedPost[]
  category    Category    @relation(fields: [categoryId], references: [id])
  categoryId  String
  author      User        @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    String
  // likeCount    Int          @default(0)
  // commentCount Int          @default(0)
  // saveCount    Int          @default(0)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  publishedAt DateTime?
  deletedAt   DateTime?

  @@index([title])
  @@index([slug])
  @@index([createdAt])
  @@map("posts")
}

model Comment {
  id        String    @id @default(uuid())
  content   String
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([postId])
  @@index([authorId])
  @@map("comments")
}

model Category {
  id        String   @id @default(uuid())
  name      String   @unique
  slug      String   @unique
  posts     Post[]
  // postCount Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
  @@index([slug])
  @@map("categories")
}

model Like {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  createdAt DateTime @default(now())

  @@unique([userId, postId])
  @@map("likes")
}

model SavedPost {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  createdAt DateTime @default(now())

  @@unique([userId, postId])
  @@map("saved_posts")
}

/**
 * model SiteStats {
 * id           String   @id @default(uuid())
 * totalUsers   Int      @default(0)
 * totalPosts   Int      @default(0)
 * totalComments Int     @default(0)
 * totalLikes   Int      @default(0)
 * measuredAt   DateTime @default(now())
 * updatedAt    DateTime @updatedAt
 * @@map("site_stats")
 * }
 */
